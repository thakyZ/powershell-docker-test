name: Docker Build

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  publish:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Run Build Environment
        run: |
          $version = "latest"
          $images = @("citadel-station-13")
          $targets = @("1809")
          $dockerfiles = @("Dockerfile")
          $BYOND_MAJOR = 513
          $BYOND_MINOR = 1536

          $buildCmds = New-Object System.Collections.Generic.List[System.String]
          $imgPushCmds = New-Object System.Collections.Generic.List[System.String]
          $manifestCmds = New-Object System.Collections.Generic.List[System.String]
          $manifestPushCmds = New-Object System.Collections.Generic.List[System.String]

          for ($i=0; $i -lt $images.length; $i++) {
            $currBaseImage = "${{ secrets.DOCKER_HUB_USERNAME }}/$($images[$i]):$($version)"
            $manifestCmd = "docker manifest create $($currBaseImage)"
            $manifestPushCmd = "docker manifest push $($currBaseImage)"

            for ($j=0; $j -lt $targets.length; $j++) {
              $currImage = "$($currBaseImage)"
              $versionBuildArg = ""
              if ($dockerfiles[$i].IndexOf(".dev.") -eq -1) {
                $versionBuildArg = "--build-arg VERSION=$($version)"
              }
              $buildCmd = "docker build -t $($currImage) -f $($dockerfiles[$i]) --build-arg BASE=$($targets[$j]) --build-arg BYOND_MAJOR=$($BYOND_MAJOR) --build-arg BYOND_MINOR=$($BYOND_MINOR) --isolation hyperv $versionBuildArg ."
              $buildCmds.Add($buildCmd)

              $imgPushCmd = "docker push $($currImage)"
              $imgPushCmds.Add($imgPushCmd)

              $manifestCmd = "$manifestCmd $currImage"
            }
            $manifestCmds.Add($manifestCmd)
            $manifestPushCmds.Add($manifestPushCmd)
          }
          echo "buildCmdsString=$($buildCmds -join "###")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "imgPushCmdsString=$($imgPushCmds -join "###")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "manifestCmdsString=$($manifestCmds -join "###")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "manifestPushCmdsString=$($manifestPushCmds -join "###")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          echo $(jq -c '. + { "experimental": \"enabled\" }' "$env:DOCKER_CONFIG\config.json") | Out-File -Encoding ASCII "$env:DOCKER_CONFIG\config.json"

      - name: Build Docker images
        run: |
          $buildCmds = $env:buildCmdsString.Split("###", [StringSplitOptions]::RemoveEmptyEntries)

          foreach ($buildCmd in $buildCmds) {
            Write-Host $buildCmd
            Invoke-Expression $buildCmd
          }

      - name: Push Docker images
        run: |
          $imgPushCmds = $env:imgPushCmdsString.Split("###", [StringSplitOptions]::RemoveEmptyEntries)

          foreach ($imgPushCmd in $imgPushCmds) {
            Write-Host $imgPushCmd
            Invoke-Expression $imgPushCmd
          }

      - name: Create Docker manifests
        run: |
          $manifestCmds = $env:manifestCmdsString.Split("###", [StringSplitOptions]::RemoveEmptyEntries)

          foreach ($manifestCmd in $manifestCmds) {
            Write-Host $manifestCmd
            Invoke-Expression $manifestCmd
          }

      - name: Push Docker manifests
        run: |
          $manifestPushCmds = $env:manifestPushCmdsString.Split("###", [StringSplitOptions]::RemoveEmptyEntries)

          foreach ($manifestPushCmd in $manifestPushCmds) {
            Write-Host $manifestPushCmd
            Invoke-Expression $manifestPushCmd
          }
